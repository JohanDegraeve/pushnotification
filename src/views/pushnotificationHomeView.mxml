<?xml version="1.0" encoding="utf-8"?>
<s:View xmlns:fx="http://ns.adobe.com/mxml/2009" 
		creationComplete="onCreationComplete()"
		xmlns:s="library://ns.adobe.com/flex/spark" title="PushNotification">

	<fx:Script>
		<![CDATA[
			import com.freshplanet.ane.AirBackgroundFetch.BackgroundFetch;
			
			import spark.formatters.DateTimeFormatter;
			
			private static var initialStart:Boolean = true;
			private static var pushTimer:Timer;
			import com.hurlant.util.Base64;
			import com.hurlant.util.Hex;
			
			
			import quickbloxsecrets.QuickBloxSecrets;
			private static const QUICKBLOX_DOMAIN:String = "https://api.quickblox.com";
			private static const QUICKBLOX_REST_API_VERSION:String = "0.1.0";
			private static var QB_Token:String = "";
			public static var ALPHA_CHAR_CODES:Array = ["0","1","2","3","4","5","6","7","8","9","a","b","c","d","e","f"];
			
			[Bindable]
			private static var labeltext:String = "";


			protected function onCreationComplete():void
			{
				//Application.init(DistriqtKey.distriqtKey);
				if (initialStart) {
					
					//seems necessary to create a dateformatter here otherwise when initializing the backgroundfetch ane 
					//i keep getting class not found error #1014
					var dateFormatter:DateTimeFormatter = new DateTimeFormatter();;
					
					BackgroundFetch.init();
					initialStart = false;	
					pushTimer = new Timer(5 * 60 * 1000, 0);
					pushTimer.addEventListener(TimerEvent.TIMER, createSessionQuickBlox);
					pushTimer.start();
					createSessionQuickBlox();
				}
			}
			
			
			public static function createSessionQuickBlox():void {
				labeltext = "create qb session";
				//var udid:String = Application.service.device.uniqueId("vendor", true);
				var nonce:String = createNonce(10);
				var timeStamp:String = (new Date()).valueOf().toString().substr(0, 10);
				var toSign:String = "application_id=" + QuickBloxSecrets.ApplicationId 
					+ "&auth_key=" + QuickBloxSecrets.AuthorizationKey
					+ "&nonce=" + nonce
					+ "&timestamp=" + timeStamp;
				
				var key:ByteArray = Hex.toArray(Hex.fromString(QuickBloxSecrets.AuthorizationSecret));
				var data:ByteArray = Hex.toArray(Hex.fromString(toSign));
				var signature:String = BackgroundFetch.generateHMAC_SHA1(QuickBloxSecrets.AuthorizationSecret, toSign);
				
				var postBody:String = 
					'{"application_id": "' + QuickBloxSecrets.ApplicationId + 
					'", "auth_key": "' + QuickBloxSecrets.AuthorizationKey + 
					'", "timestamp": "' + timeStamp + 
					'", "nonce": "' + nonce + 
					'", "signature": "' + signature +
					'"}';
				var loader:URLLoader = new URLLoader();
				var request:URLRequest = new URLRequest(QUICKBLOX_DOMAIN + "/session.json");
				request.contentType = "application/json";
				request.method = URLRequestMethod.POST;					
				request.data = postBody;
				request.requestHeaders.push(new URLRequestHeader("QuickBlox-REST-API-Version", QUICKBLOX_REST_API_VERSION));
				loader.addEventListener(Event.COMPLETE, createBloxSessionSuccess);
				loader.addEventListener(IOErrorEvent.IO_ERROR, createBloxSessionFailure);
				loader.load(request);
			}
			
			private static function createBloxSessionFailure(event:IOErrorEvent):void {
				trace("PushNotificationService.as createBloxSessionFailure " + (event.currentTarget.data ? event.currentTarget.data:""));
				labeltext = "create qb session failed";
			}
			
			private static function createBloxSessionSuccess(event:Event):void {
				trace("PushNotificationService.as createBloxSessionSuccess");
				var eventAsJSONObject:Object = JSON.parse(event.target.data as String);
				QB_Token = eventAsJSONObject.session.token;
				userSignInQuickBlox();
			}
			
			private static function userSignInQuickBlox():void {
				labeltext = "sign in qb";
				var postBody:String = '{"login": "' + QuickBloxSecrets.MasterQuickBloxLogin + '", "password": "' + QuickBloxSecrets.Masterpw + '"}';
				var loader:URLLoader = new URLLoader();
				var request:URLRequest = new URLRequest(QUICKBLOX_DOMAIN + "/login.json");
				request.method = URLRequestMethod.POST;					
				request.data = postBody;
				request.contentType = "application/json";
				request.requestHeaders.push(new URLRequestHeader("QuickBlox-REST-API-Version", QUICKBLOX_REST_API_VERSION));
				request.requestHeaders.push(new URLRequestHeader("QB-Token", QB_Token));
				loader.addEventListener(Event.COMPLETE, signInSuccess);
				loader.addEventListener(IOErrorEvent.IO_ERROR, signInFailure);
				loader.load(request);
			}
			
			private static function signInSuccess(event:Event):void {
				trace("PushNotificationService.as signInSuccess");
				var eventAsJSONObject:Object = JSON.parse(event.target.data as String);
				sendPushNotification();
			}
			
			private static function sendPushNotification():void {
				labeltext = "send push";
				var payloadAsObject:Object = new Object();
				var apsObject = new Object();
				apsObject["alert"] = "";
				apsObject["content-available"] = "1";
				apsObject["priority"] = "10";
				payloadAsObject["aps"] = apsObject;
				
				var payload:String = JSON.stringify(payloadAsObject);
				/*var payload:String = "{" +
					"aps =     {" + 
					'"content-available" = 1;' + 
					'"alert" = "";' +
					'"priority" = 10;' +
					'};' +
					'}';*/
				payload = Base64.encode(payload);
				
				var postBody:String = '{"event": {"notification_type": "push", "environment": "development", ' +
					'"user": { "tags": { "any":"ALL"}}, ' +
					'"message": "payload=' + payload + '", "push_type": "apns"}}';
				
				var loader:URLLoader = new URLLoader();
				var request:URLRequest = new URLRequest(QUICKBLOX_DOMAIN + "/events.json");
				request.contentType = "application/json";
				request.method = URLRequestMethod.POST;					
				request.data = postBody;
				request.requestHeaders.push(new URLRequestHeader("QuickBlox-REST-API-Version", QUICKBLOX_REST_API_VERSION));
				request.requestHeaders.push(new URLRequestHeader("QB-Token", QB_Token));
				loader.addEventListener(Event.COMPLETE, pushNotificationSentSuccess);
				loader.addEventListener(IOErrorEvent.IO_ERROR, pushNotificationSentFailure);
				loader.load(request);
			}
			
			private static function pushNotificationSentSuccess(event:Event):void {
				labeltext = "send push success";
				trace("PushNotificationService.as pushNotificationSentSuccess");
			}
			
			private static function pushNotificationSentFailure(event:IOErrorEvent):void {
				labeltext = "send push failed";
				trace("PushNotificationService.as pushNotificationSentFailure" + (event.currentTarget.data ? event.currentTarget.data:""));
			}
			
			private static function signInFailure(event:IOErrorEvent):void {
				trace("PushNotificationService.as signInFailure " + (event.currentTarget.data ? event.currentTarget.data:""));
			}
			
			public static function createNonce(length:int):String {
				var nonce:Array = new Array(length);
				for (var i:int = 0; i < length; i++) {
					nonce[i] = ALPHA_CHAR_CODES[Math.floor(Math.random() *  10)];
				}
				var returnValue:String = "";
				for (i = 0; i < nonce.length; i++)
					returnValue += nonce[i];
				return returnValue;
			}

			
		]]>
	</fx:Script>

	<s:Group y="0" x="0" width="100%" height="100%" left="5" top="5" right="5">
		<s:layout>
			<s:VerticalLayout/>
		</s:layout>
		<s:Group width="100%">
			<s:layout>
				<s:VerticalLayout paddingTop="5" paddingBottom="5" paddingLeft="5" paddingRight="5" gap="5" 
									horizontalAlign="left" verticalAlign="middle"/>
			</s:layout>
			<s:Label text = "{labeltext}"  
					 paddingLeft="0" paddingRight="0" paddingTop="10" paddingBottom="10" fontSize="18"/>

		</s:Group>
	</s:Group>
</s:View>
